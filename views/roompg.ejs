<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <title>OIP</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://kit.fontawesome.com/37617b8430.js" crossorigin="anonymous"></script>
    <style media="screen">
      *{
        margin: 0;
      }
      #RId{
        width: fit-content;
        display: inline-block;
      }
      #videoDiv{
        display: grid;
        height: 650px;
        grid-template-rows: repeat(2,auto);
        grid-auto-flow: column;
        columns: auto;
        grid-column-gap: 2px;
        grid-row-gap: 2px;
      }
      footer{
        text-align: center;
        position:relative;
        bottom:0;
        background-color: #9400d3;
        color: #fff;
        width: 100%;
      }
      button{
        padding: 0;
        border: none;
        background: none;
      }
       
      video {
        width: 100%;
        height: 100%;
        object-fit:cover;
        border:10px solid transparent;
        border-radius: 5vh;
      }
      
      html { height: 100%; }
      body { margin: 0; height: 100vh; position: relative; }
      /* Height / width / positioning can be customized for your use case.
         For demo purposes, we make firepad fill the entire browser. */
      #firepad-container {
        width: 100%;
        height: 100%;
      }
      .tab-content {
            border: 1px solid #9400d3;
            padding: 20px;
        }
        .nav-tabs .nav-link.active {
            background-color: #9400d3;
            color: #fff;
            border: 3px solid #9400d3;
        }
        .btn-outline-primary:hover{
          background-color: #9400d3;
          border: 1px solid #9400d3;
        }
        .btn-outline-primary{
          border: 1px solid #9400d3;
          color: #9400d3;
        }



    </style>
    <script type="text/javascript">
      var roomID = "<%= RoomId %>"
      function copyCode(){
        let rid_temp = window.location.pathname.substring(1) + window.location.hash;
        navigator.clipboard.writeText(rid_temp);
      }
    </script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js" defer></script>
    <script src="socket.io/socket.io.js" defer></script>
    <script src="roompg.js" charset="utf-8" defer></script>

  <!-- Firebase -->
  <script src="https://www.gstatic.com/firebasejs/5.5.4/firebase.js"></script>
  <!-- ACE and its JavaScript mode and theme files -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.5/ace.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.5/mode-javascript.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.5/theme-textmate.js"></script>

  <!-- Firepad -->
  <link rel="stylesheet" href="https://firepad.io/releases/v1.5.9/firepad.css" />
  <script src="https://firepad.io/releases/v1.5.9/firepad.min.js"></script>


  </head>
  <body onload="init()">
    <div class="container fluid" >
      <div class="row" >
        <div class="col" style="margin-top: 4%;">
          <div id="videoDiv">
          </div>
        </div>
        <div class="col" style="margin-top: 4%;">
          <ul class="nav nav-tabs">
            <li class="nav-item">
              <a class="nav-link active" data-bs-toggle="tab" href="#whitebrd">whiteboard</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" data-bs-toggle="tab" href="#cdeditr">Code Editor</a>
            </li>
            </li>
          </ul>
          <div class="tab-content">
            <div class="tab-pane active" id="whitebrd"><div style="width: 650px; height: 550px;" id="wt-container"></div></div>
            <div class="tab-pane" id="cdeditr"><div style="width: 650px; height: 550px;" id="firepad-container"></div></div>
          </div>
        </div>
      </div>
      <div class="row">
        <p>
          <center>
            <button class="btn btn-outline-primary my-0 " id="start">Start Sharing</button>
            <button class="btn btn-outline-primary my-0" id="stop">Stop Sharing</button>
            <button class="btn btn-outline-primary my-0" id="record">Start Recording</button>
          </center>
        </p>
      </div>
      <!-- <div class="row">
        <footer>
          <div id="RId"></div>
          <button onclick="copyCode()">
            <span style= "color:white;">
            <i class="fa fa-regular fa-copy"></i>
            </span></button>
      </footer>
      </div> -->
      
    </div>

    

    <!-- <div style="width: 600px; height: 550px;" id="wt-container"></div>
          <div id="firepad-container"></div> --> 

    <script src="https://www.whiteboard.team/dist/api.js"></script>
    <script type="text/javascript">
        const client = '<%= process.env.WHITEBOARD_CLIENT_ID %>';
        var wt = new api.WhiteboardTeam('#wt-container', {
            clientId: client,
            boardCode: roomID
        });
    </script>
    
    

    <script>
      function init() {
        //// Initialize Firebase.
        //// TODO: replace with your Firebase project configuration.
        var config = {
          apiKey: '<%= process.env.FIREPAD_API_KEY %>',
          authDomain: "firepad-gh-tests.firebaseapp.com",
          databaseURL: "https://firepad-gh-tests.firebaseio.com"
        };
        firebase.initializeApp(config);
  
        //// Get Firebase Database reference.
        var firepadRef = getExampleRef();
  
        //// Create ACE
        var editor = ace.edit("firepad-container");
        editor.setTheme("ace/theme/textmate");
        var session = editor.getSession();
        session.setUseWrapMode(true);
        session.setUseWorker(false);
        session.setMode("ace/mode/javascript");
  
        //// Create Firepad.
        var firepad = Firepad.fromACE(firepadRef, editor, {
          defaultText: '// Collaborative Code Editor By OIP!'
        });
      }
  
      // Helper to get hash from end of URL or generate a random one.
      function getExampleRef() {
        var ref = firebase.database().ref();
        var hash = window.location.hash.replace(/#/g, '');
        if (hash) {
          ref = ref.child(hash);
        } else {
          ref = ref.push(); // generate unique location.
          window.location = window.location + '#' + ref.key; // add it as a hash to the URL.
        }
        if (typeof console !== 'undefined') {
          console.log('Firebase data: ', ref.toString());
        }
        return ref;
      }
    </script>
    

<script>
  function main() {
  const video = document.createElement("video");
  video.controls = true;
  const start = document.getElementById("start");
  const stop = document.getElementById("stop");

  var displayMediaOptions = {
    video: {
      cursor: "always",
    },
    audio: false,
  };

  start.onclick = function (e) {
    startSharing();
  };
  stop.onclick = function (e) {
    stopSharing();
  };

  async function startSharing() {
      var displayMediaOptions = {
      video: {
          cursor: "always"
      },
      audio: true
    };
    navigator.mediaDevices.getDisplayMedia(displayMediaOptions)
    .then(function (stream) {
      myVideoStream = stream;
      addVideo(myvideo , stream);
      peer.on('call' , call=>{
        call.answer(stream);
          const vid = document.createElement('video');
          vid.controls = true;
        call.on('stream' , userStream=>{
          addVideo(vid , userStream);
        })
        call.on('error' , (err)=>{
          alert(err)
        })
        call.on("close", () => {
            console.log(vid);
            vid.remove();
        })
        peerConnections[call.peer] = call;
      })

    }).catch(err=>{
      alert(err.message)
      console.log(err.message);
    });
    }

    function stopSharing() {
      navigator.mediaDevices.getUserMedia({
      video:true,
      audio:true
      }).then((stream)=>{
      myVideoStream = stream;
      addVideo(myvideo , stream);
      peer.on('call' , call=>{
        call.answer(stream);
          const vid = document.createElement('video');
          vid.controls = true;
        call.on('stream' , userStream=>{
          addVideo(vid , userStream);
        })
        call.on('error' , (err)=>{
          alert(err)
        })
        call.on("close", () => {
            console.log(vid);
            vid.remove();
        })
        peerConnections[call.peer] = call;
      })
    }).catch(err=>{
        alert(err.message)
        console.log(err.message);
    })
    }
}

main();
  </script>


<script>
  console.log("Entered script");
  let startRec = document.getElementById("record");
  let state = false;
  let mediaRecorderShared = null;
  async function startRecording() {
      console.log("Started recording");
      var displayMediaOptions = {
      video: {
          cursor: "always"
      },
      audio: true
    };
    navigator.mediaDevices.getDisplayMedia(displayMediaOptions)
    .then(function (stream) {
      //Test recording
      var recordedChunks = [];
      var options = { mimeType: "video/webm; codecs=vp9" };
      mediaRecorder = new MediaRecorder(stream, options);

      mediaRecorder.ondataavailable = handleDataAvailable;
      mediaRecorder.start();

      function handleDataAvailable(event) {
        console.log("data-available");
        if (event.data.size > 0) {
          recordedChunks.push(event.data);
          console.log(recordedChunks);
          download();
        } else {
          // ...
        }
      }
      function download() {
        var blob = new Blob(recordedChunks, {
          type: "video/webm"
        });
        var url = URL.createObjectURL(blob);
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        a.href = url;
        a.download = "test.webm";
        a.click();
        window.URL.revokeObjectURL(url);
      }
      mediaRecorderShared = mediaRecorder;
    }).catch(err=>{
      alert(err.message)
      console.log(err.message);
    });
    }
    async function stopRecording(){
      mediaRecorderShared.stop();
    }
startRec.onclick = function(e){
    //console.log("Onclick event set");
    if(!state){
      state = true;
      startRecording();
      startRec.textContent = "Stop Recording";
    }
    else{
      state = false;
      stopRecording();
      startRec.textContent = "Start Recording";
    }

}
//startRecording(); //Start of the recording 
</script>


    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
  </body>
</html>